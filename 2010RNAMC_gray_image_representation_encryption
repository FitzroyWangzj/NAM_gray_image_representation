import cv2
import numpy as np
import time
import pandas as pd


#位平面分解
def BPD(img, r, c):
    x=np.zeros((r,c,8),dtype=np.uint8)#提取矩阵
    m=np.zeros((r,c,8),dtype=np.uint8)#提取位平面的后的矩阵
    for i in range(8):
         x[:,:,i]=2**i
         m[:,:,i]=cv2.bitwise_and(img,x[:,:,i])
         mask=m[:,:,i]>0
         m[mask]=1
    return m
#判断该区域是否已被划分
def isRecorded(vis, x1, y1, x2, y2):
    for i in range(x1,x2+1):
        for j in range(y1,y2+1):
            if vis[i,j] == 1:
                return True
    return False
# 计算gest
def caculateGest(g1, g2, g3, g4, x, y, x1, y1, x2, y2):
    i1 = (y-y1)/(y2-y1)
    i2 = (x-x1)/(x2-x1)
    g5 = g1+(g2-g1)*i2
    g6 = g3+(g4-g3)*i2
    return (g5+(g6-g5)*i1)
# 判断划分是否为同类块
def judge(img, x1, y1, x2, y2, epsilon):
    # 标准矩阵
    if x1 < x2 and y1 < y2:
        # 转化为int型防止相减小于0时出现溢出
        g1 = int(img[x1, y1])
        g2 = int(img[x2, y1])
        g3 = int(img[x1, y2])
        g4 = int(img[x2, y2])
        for x in range(x1,x2+1):
            for y in range(y1, y2+1):
                gest = caculateGest(g1, g2, g3, g4, x, y, x1, y1, x2, y2)
                if abs(int(img[x, y])-gest) > epsilon:
                    return False
        return True
    # 宽为1的矩形
    if x1 != x2 and y1 == y2:
        g1 = int(img[x1, y1])
        g4 = int(img[x2, y1])
        for x in range(x1, x2+1):
            i2 = (x-x1)/(x2-x1)
            gest = g1+(g4-g1)*i2
            if abs(int(img[x, y1]) - gest) > epsilon:
                return False
        return True
    # 长为1的矩形
    if x1 == x2 and y1 != y2:
        g1 = int(img[x1,y1])
        g4 = int(img[x1,y2])
        for y in range(y1,y2+1):
            i1 = (y-y1)/(y2-y1)
            gest = g1+(g4-g1)*i1
            if abs(int(img[x1, y]) - gest) > epsilon:
                return False
        return True
    # 孤立点矩形
    if x1 == x2 and y1 == y2:
        return True
# 横向扩展矩形
def expand_x(img,vis,x1,y1,x2,y2,c,smax,epsilon):
    #已到边界则返回
    if x2 >= c-1:
        return [x2,y2,smax]
    xm = x2
    ym = y2
    s = 0
    for y in range(y1,y2+1):
        x3 = x2+1
        while not isRecorded(vis, x3, y1, x3, y) and judge(img, x1, y1, x3, y, epsilon):
            x3 += 1
            if x3 >= c:
                break

        if x3 > 0:
            x3 -= 1

        s = (x3-x1+1)*(y-y1+1)
        if s > smax or (s == smax and x3 > xm):
            smax = s
            xm = x3
            ym = y
    return[xm, ym, smax]
#纵向扩展矩形
def expand_y(img,vis,x1,y1,x2,y2,xm,ym,r,smax,epsilon):
    # 已到边界则返回
    if y2 >= r - 1:
        return [xm, ym]
    s = 0
    for x in range(x1, x2 + 1):
        y3 = y2 + 1
        while judge(img, x1, y1, x, y3, epsilon):
            y3 += 1
            if y3 >= c:
                break

        if y3 > 0:
            y3 -= 1

        s = (x - x1 + 1) * (y3 - y1 + 1)
        if s > smax:
            smax = s
            xm = x
            ym = y3
    return [xm, ym]
# 寻找最优子模式(对角线优先）
# def searchMatrix(img, r, c, x1, y1, epsilon):
#     x2 = x1+1
#     y2 = y1+1
#     if x2 >= c:
#         x2 = c-1
#     if y2 >= r:
#         y2 = r-1
#     # 沿对角线扩展矩形
#     while not isRecorded(vis,x2,y1,x2,y2) and judge(img, x1, y1, x2, y2, epsilon):
#         x2 += 1
#         if x2 >= c:
#             break
#
#         y2 += 1
#         if y2 >= r:
#             break
#
#     if x2 > 0:
#         x2 -= 1
#     if y2 > 0:
#         y2 -= 1
#
#     # 横向扩展
#     x3 = x2
#     while not isRecorded(vis, x3, y1, x3, y2) and judge(img, x1, y1, x3, y2, epsilon):
#         x3 += 1
#         if x3 >= c:
#             break
#
#     if x3 > 0:
#         x3 -= 1
#     # 纵向扩展
#     y3 = y2
#     while judge(img, x1, y1, x2, y3, epsilon):
#         y3 += 1
#         if y3 >= r:
#             break
#
#     if y3 > 0:
#         y3 -= 1
#
#     # 选择扩展方向
#     if x3-x2 >= y3-y2:
#         return [x3, y2]
#     else:
#         return [x2, y3]
# 寻找当前状态下最大同类块(对角线优先）
#  寻找最优子模式（横向扩展优先）
# def searchMatrix(img, r, c, x1, y1, epsilon):
#     x2 = x1
#     y2 = y1
#     while not vis[x2, y1] and judge(img, x1, y1, x2, y2, epsilon):
#         x2 += 1
#         if x2 >= c:
#             break
#
#     if x2 > 0:
#         x2 -= 1
#     # 纵向扩展
#     while judge(img, x1, y1, x2, y2, epsilon):
#         y2 += 1
#         if y2 >= r:
#             break
#
#     if y2 > 0:
#         y2 -= 1
#     return [x2,y2]
# 寻找最优子模式(对角线优先+遍历长度及高度）
def searchMatrix(img, r, c, x1, y1, epsilon):#,num):
    x2 = x1#+1
    y2 = y1#+1
    # if x2 >= c:
    #     x2 = c-1
    # if y2 >= r:
    #     y2 = r-1
    # 沿对角线扩展矩形
    while not isRecorded(vis,x2,y1,x2,y2) and judge(img, x1, y1, x2, y2, epsilon):
        x2 += 1
        y2 += 1
        if x2 >= c or y2 >= r:
            break

    if x2 > 0:
        x2 -= 1
    if y2 > 0:
        y2 -= 1
    smax = (x2-x1+1)**2

    # 遍历y的取值横向扩展
    [xm,ym,smax] = expand_x(img,vis,x1,y1,x2,y2,c,smax,epsilon)
    # 遍历x的取值纵向扩展
    [xm,ym] = expand_y(img,vis,x1,y1,x2,y2,xm,ym,r,smax,epsilon)

    return [xm,ym]

#寻找最优子模式（遍历y2取最大面积）
# def searchMatrix(img, r, c, x1, y1, epsilon):
#     xm = x1
#     ym = y1
#     sm = 1
#     for y2 in range(y1, r + 1):
#         x2 = x1
#         while not isRecorded(vis,x1,y1,x2,y2) and judge(img,x1,y1,x2,y2,epsilon):
#             x2 += 1
#
#             if x2 >= c:
#                 break
#         if x2 > 0 and x2 != x1:
#             x2 -= 1
#
#         s = (x2-x1+1)*(y2-y1+1)
#         if s > sm or (s == sm and x2 > xm):
#             xm = x2
#             ym = y2
#             sm = s
#     return [xm, ym]


# 将矩阵子模式信息存入颜色表P及矩阵R中
def record(P, vis,  R, img, x1, y1, x2, y2, num):
    if x1 < x2 and y1 < y2:
        P[num] = [img[x1, y1], img[x2, y1], img[x1, y2], img[x2, y2]]
        R[x1, y1] = 1
        R[x2, y2] = 2
        for i in range(x1, x2+1):
            for j in range(y1, y2+1):
                vis[i, j] = 1

    elif (x1 == x2 and y1 != y2) or (x1 != x2 and y1 == y2):
        P[num] = [img[x1, y1], img[x2, y2]]
        R[x1, y1] = 1
        R[x2, y2] = 2
        for i in range(x1, x2+1):
            for j in range(y1, y2+1):
                vis[i, j] = 1

    elif x1 == x2 and y1 == y2:
        P[num] = [img[x1, y1]]
        R[x1, y1] = -1
        vis[x1, y1] = 1
    return


def encryption(P, Q, R, vis, img, num, r, c, epsilon):
    x1 = 0
    y1 = 0
    while x1 < c and y1 < r:
        [x2, y2] = searchMatrix(img, r, c, x1, y1, epsilon) #  ,num)
        num += 1
        record(P, vis, R, img, x1, y1, x2, y2, num)
        x1 = x2+1
        # 若溢出，则换行扫描
        if x1 >= c:
            x1 = 0
            y1 += 1
        while vis[x1, y1]:
            x1 += 1
            if x1 >= c:
                x1 = 0
                y1 += 1
                if y1 >= r:
                    return num
    return num

start_time = time.time()
# 设定参数
epsilon = 10
# read image
img = cv2.imread("D:/desktop/SRP/Test/197.bmp", 0)
[r, c] = img.shape
img = img.T  # 转置矩阵使得第一个下标为横坐标，第二个下标为纵坐标

P = {}  # 颜色表
Q = []  # 坐标表
R = np.zeros((c, r), dtype=int)  # 用于编码的坐标矩阵
vis = np.zeros((c, r), dtype=bool)  #  记录是否已被编码
num = 0
# 加密
num = encryption(P, Q, R, vis, img, num, r, c, epsilon)
R = R.T
print(R)
print(P)
cv2.waitKey()
cv2.destroyAllWindows()
end_time = time.time()
print("time=")
print(end_time-start_time)
